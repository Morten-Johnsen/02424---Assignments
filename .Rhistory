m3 <- lm(anscombe$y3 ~ anscombe$x3)
m4 <- lm(anscombe$y4 ~ anscombe$x4)
plot(m1)
plot(m1) # OK
plot(m2)
plot(m3)
plot(m4)
rm(list=ls())
setwd("~/Documents/Uni/TiendeSemester/Specialkursus/Exercises/Week3")
read.csv("Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen 2.numbers")
rm(list=ls())
setwd("~/Documents/Uni/TiendeSemester/Specialkursus/Exercises")
read.csv("Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen 2.numbers")
setwd("~/Documents/Uni/TiendeSemester/Specialkursus/Exercises")
read.csv("Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen 2.numbers")
read.csv("/Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen 2.numbers")
read.csv("/Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen.csv")
read.csv("Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen.csv")
rm(list=ls())
setwd("~/Documents/Uni/TiendeSemester/Specialkursus/Exercises")
read.csv("Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen.csv")
read.csv("Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen.csv",sep=";")
read.csv("Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen.csv",sep=";")
cases <- read.csv("Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen.csv",sep=";")
cases
library(data.table)
setwd("~/Documents/Uni/TiendeSemester/Specialkursus/Exercises")
cases <- as.data.table(read.csv("Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen.csv",sep=";"))
cases
cases[,sum(Brkaftede.tilfalde.i.alt),by=Provetagningsdato]
cases[,sum(Bekraftede.tilfalde.i.alt),by=Provetagningsdato]
cases[,.(cases = sum(Bekraftede.tilfalde.i.alt)),by=Provetagningsdato]
cases <- cases[,.(cases = sum(Bekraftede.tilfalde.i.alt)),by=Provetagningsdato]
cases <- as.data.table(read.csv("Data/03_bekraeftede_tilfaelde_doede_indlagte_pr_dag_pr_koen.csv",sep=";"))
cdata <- cases[,.(cases = sum(Bekraftede.tilfalde.i.alt)),by=Provetagningsdato]
plot(cases~Provetagningsdato, data = cdata)
cdata[is.na(cases)]
plot(cases~Provetagningsdato, data = cdata)
plot(cases,Provetagningsdato, data = cdata)
plot(cases~Provetagningsdato, data = cdata)
ggplot(data=cdata,aes(x=Provetagningsdato,y=cases)) +
geom_line()
library(ggplot2)
ggplot(data=cdata,aes(x=Provetagningsdato,y=cases)) +
geom_line()
ggplot() +
geom_line(data=cdata,aes(x=Provetagningsdato,y=cases))
cdata[,max(cases)]
cdata[,.(Provetagningsdato,max(cases))]
cdata[cases==max(cases),.(Provetagningsdato,max(cases))]
cdata[Provetagningsdato <= "2022-01-01",.(Provetagningsdato,max(cases))]
cdata[Provetagningsdato <= "2022-01-01" & Provetagningsdato >= "2021-08-01" ,.(Provetagningsdato,max(cases))]
subs <- cdata[Provetagningsdato <= "2022-01-01" & Provetagningsdato >= "2021-08-01" ,.(Provetagningsdato,max(cases))]
subs <- cdata[Provetagningsdato <= "2022-01-01" & Provetagningsdato >= "2021-08-01" ,.(Provetagningsdato,max(cases))]
ggplot() +
geom_line(data=subs,aes(x=Provetagningsdato,y=cases))
subs
subs <- cdata[Provetagningsdato <= "2022-01-01" & Provetagningsdato >= "2021-08-01" ,]
ggplot() +
geom_line(data=subs,aes(x=Provetagningsdato,y=cases))
ggplot() +
geom_point(data=subs,aes(x=Provetagningsdato,y=cases))
subs <- cdata[Provetagningsdato <= "2022-03-01" & Provetagningsdato >= "2021-08-01" ,]
ggplot() +
geom_point(data=subs,aes(x=Provetagningsdato,y=cases))
ggplot() +
geom_point(data=subs,aes(x=Provetagningsdato,y=cases)) +
vline("2021-12-01")
ggplot() +
geom_point(data=subs,aes(x=Provetagningsdato,y=cases)) +
geom_vline("2021-12-01")
ggplot() +
geom_point(data=subs,aes(x=Provetagningsdato,y=cases)) +
geom_vline(xintercept"2021-12-01")
ggplot() +
geom_point(data=subs,aes(x=Provetagningsdato,y=cases)) +
geom_vline(xintercept="2021-12-01")
ggplot() +
geom_point(data=subs,aes(x=Provetagningsdato,y=cases)) +
geom_vline(xintercept="2021-12-01",linetype="dashed")
ggplot() +
geom_point(data=subs,aes(x=Provetagningsdato,y=cases)) +
geom_vline(xintercept="2021-12-01",linetype="dashed",color="red")
ggplot() +
geom_point(data=subs,aes(x=Provetagningsdato,y=cases)) +
geom_vline(xintercept="2021-12-10",linetype="dashed",color="red")
subs
subs[,':=' (date = Provetagningsdato)]
subs
subs <- cdata[Provetagningsdato <= "2022-03-01" & Provetagningsdato >= "2021-08-01" ,.(date=Provetagningsdato,cases)]
ggplot() +
geom_point(data=subs,aes(x=date,y=cases)) +
geom_vline(xintercept="2021-12-10",linetype="dashed",color="red")
subs
subs[,.(timestep = 1:length(subs$date))]
subs[,':=' (timestep = 1:length(subs$date))]
subs
subs <- cdata[Provetagningsdato <= "2022-03-01" & Provetagningsdato >= "2021-08-01" ,.(timestep = 1:length(subs$date),cases)]
subs
subs <- cdata[Provetagningsdato <= "2022-03-01" & Provetagningsdato >= "2021-08-01" ,.(timestep = 1:length(subs$date),date=Provetagningsdato,cases)]
plot(cases~Provetagningsdato, data = cdata)
subs <- cdata[Provetagningsdato <= "2022-03-01" & Provetagningsdato >= "2021-08-01" ,.(timestep = 1:length(subs$date),date=Provetagningsdato,cases)]
cdata <- cases[,.(cases = sum(Bekraftede.tilfalde.i.alt)),by=Provetagningsdato]
plot(cases~Provetagningsdato, data = cdata)
subs <- cdata[Provetagningsdato <= "2022-03-01" & Provetagningsdato >= "2021-08-01" ,.(timestep = 1:length(subs$date),date=Provetagningsdato,cases)]
subs <- cdata[Provetagningsdato <= "2022-03-01" & Provetagningsdato >= "2021-08-01" ,.(timestep = 1:.N,date=Provetagningsdato,cases)]
subs[,':=' (timestep = 1:length(subs$date))]
subs <- cdata[Provetagningsdato <= "2022-03-01" & Provetagningsdato >= "2021-08-01" ,.(timestep = 1:.N,date=Provetagningsdato,cases)]
subs
ggplot() +
geom_point(data=subs,aes(x=date,y=cases)) +
geom_vline(xintercept="2021-12-10",linetype="dashed",color="red")
subs[,':=' (susceptible = 6000000 - cumsum(cases))]
subs
write.csv(subs, "Data/SIRdata.csv")
write.csv(subs$timestep, "Data/timedata.csv")
write.csv(subs$cases, "Data/Idata.csv")
write.csv(subs$susceptible, "Data/Sdata.csv")
subs$timestep
write.csv(subs$timestep, "Data/timedata.csv")
write.csv(subs$cases, "Data/Idata.csv")
write.csv(subs$susceptible, "Data/Sdata.csv")
subs
ggplot() +
geom_point(data=subs,aes(x=date,y=cases)) +
geom_vline(xintercept="2022-02-10",linetype="dashed",color="red")
ggplot() +
geom_point(data=subs,aes(x=date,y=cases)) +
geom_vline(xintercept="2022-02-20",linetype="dashed",color="red")
ggplot() +
geom_point(data=subs,aes(x=date,y=cases)) +
geom_vline(xintercept="2022-03-01",linetype="dashed",color="red")
rm(list=ls())
library(GGally)
library(corrplot)
if (Sys.getenv('USER') == "mortenjohnsen"){
setwd("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/10. Semester/02424 - Advanced Dataanalysis and Statistical Modellling/02424---Assignments/")
}else if (Sys.getenv('USER') == "freja"){
setwd("~/Documents/Uni/TiendeSemester/Adv. data analysis and stat. modelling/02424---Assignments")
}else{
setwd("C:/Users/catdu/OneDrive/DTU/10. semester/Advanced Dataanalysis and Statistical Modelling/Assignment 1/02424---Assignments/")
}
source("DataPrep.R")
Trans.eq1 <- function(lambda, y = dioxin$DIOX){
y_lambda <- ((y)^lambda - 1)/lambda#, lambda > 0
return(y_lambda)
}
lambda_NLL <- function(theta, y = dioxin$DIOX){
lambda <- theta[1]
y_lambda <- Trans.eq1(lambda, y)
mu <- theta[2]#mean(y_lambda)
sigma <- theta[3]#sd(y_lambda)
NLL <- -sum(-1/2*log(sigma^2) - (y_lambda-mu)^2 / (2*sigma^2) + (lambda - 1)*log(y))
return(NLL)
}
theta.hat <- nlminb(start=c(1, 0, 1), objective = lambda_NLL)
lambda.hat <- round(theta.hat$par[1], 3)
mu.hat <- round(theta.hat$par[2], 3)
sd.hat <- round(theta.hat$par[3], 3)
#See if the boxcox transformation is significantly different from the log-transformation
pf_lambda <- function(lambda, y = dioxin$DIOX){
n <- length(y)
y_lambda <- Trans.eq1(lambda)
sd <- sd(y_lambda)
ll <- -n/2 * log(sd^2) - n/2 + (lambda - 1)* sum(log(y))
return(-ll)
}
lambda_interval <- seq(-.5,0.1,0.003)
pf_curve <- -sapply(lambda_interval, FUN = pf_lambda)-max(-sapply(lambda_interval, FUN = pf_lambda))
plot(lambda_interval
,pf_curve, type = "l", main = TeX("Profile Likelihood for \\lambda")
,ylim = c(-3,0))
grid()
abline(v = lambda.hat, lty = 2)
alpha <- 0.05
c <- -0.5 * qchisq(1-alpha, df = 1)
abline(h = c, col = "red")
#95% profilelikelihood CI for lambda include 0 and thus a log-transformation is sufficient and to be preferred over the boxcox.
#wald CI for confirmation:
sd_reg <- sqrt(diag(solve(hessian(func = lambda_NLL, x = theta.hat$par))))
lambda.hat + qt(c(alpha/2, 1-alpha/2), df = length(dioxin$DIOX) - 1) * sd_reg[1]
dioxin$DIOX_boxcox <- Trans.eq1(lambda.hat, dioxin$DIOX)
hist(dioxin$DIOX_boxcox, breaks = 5)
dioxin %>%
select(-PLANT, -LAB, -OXYGEN, -LOAD, -PRSEK, -OBSERV) %>%
melt() %>%
ggplot()+
geom_histogram(aes(x = value), bins = 10)+
facet_wrap(~variable, scales = "free")
dioxin %>%
select(logDiox, TIME, LAB_USA_or_KK
, PLANT_RENO_N, PLANT_KARA # PLANT_RENO_S - is 0 in PLANT_RENO_N
, OXYGEN_Ordinal
, LOAD_Ordinal
, PRSEK_Ordinal
, O2, O2COR, NEFFEKT, QRAT) %>%
ggpairs()
# Plot ordinal values versus the actually measured values
dioxin %>%
select(OXYGEN_Ordinal
, LOAD_Ordinal
, PRSEK_Ordinal
, O2, O2COR, NEFFEKT, QRAT) %>%
ggpairs()
# Plot the values used in the first models:
# Block values and the active values (ordinal)
dioxin %>%
select(logDiox, TIME, LAB_USA_or_KK
, PLANT_RENO_N, PLANT_KARA # PLANT_RENO_S - is 0 in PLANT_RENO_N
, OXYGEN_Ordinal
, LOAD_Ordinal
, PRSEK_Ordinal) %>%
ggpairs()
dioxin %>%
select(logDiox, TIME, LAB_USA_or_KK
, PLANT_RENO_N, PLANT_KARA # PLANT_RENO_S - is 0 in PLANT_RENO_N
, OXYGEN_Ordinal
, LOAD_Ordinal
, PRSEK_Ordinal) %>%
cor() %>%
corrplot()
# Plot the values used in the second models:
# Block values and the active values (measured)
dioxin %>%
select(logDiox, TIME, LAB_USA_or_KK
, PLANT_RENO_N, PLANT_KARA # PLANT_RENO_S - is 0 in PLANT_RENO_N
, O2, O2COR, NEFFEKT, QRAT) %>%
ggpairs()
dioxin %>%
select(logDiox, TIME, LAB_USA_or_KK
, PLANT_RENO_N, PLANT_KARA # PLANT_RENO_S - is 0 in PLANT_RENO_N
, O2, O2COR, NEFFEKT, QRAT) %>%
cor() %>%
corrplot(method = 'ellipse', order = 'AOE', type = 'upper')
dioxin
# Plot the values used in the second models:
# Block values and the active values (measured)
dioxin %>%
select(logDiox, TIME, LAB_USA_or_KK
, PLANT_RENO_N, PLANT_KARA # PLANT_RENO_S - is 0 in PLANT_RENO_N
, O2, O2COR, NEFFEKT, QRAT) %>%
ggpairs()
dioxin
# Plot the values used in the second models:
# Block values and the active values (measured)
dioxin %>%
select(logDiox, TIME, factor(LAB)
, PLANT_RENO_N, PLANT_KARA # PLANT_RENO_S - is 0 in PLANT_RENO_N
, O2, O2COR, NEFFEKT, QRAT) %>%
ggpairs()
# Plot the values used in the second models:
# Block values and the active values (measured)
dioxin %>%
select(logDiox, TIME, LAB
, PLANT_RENO_N, PLANT_KARA # PLANT_RENO_S - is 0 in PLANT_RENO_N
, O2, O2COR, NEFFEKT, QRAT) %>%
ggpairs()
dioxin
# Plot the values used in the second models:
# Block values and the active values (measured)
dioxin %>%
select(logDiox, TIME, LAB
, PLANT
, O2, O2COR, NEFFEKT, QRAT) %>%
ggpairs()
# Plot the values used in the second models:
# Block values and the active values (measured)
dioxin %>%
select(logDiox, TIME, factor(LAB)
, PLANT
, O2, O2COR, NEFFEKT, QRAT) %>%
ggpairs()
dioxin
# Model(s) ----------------------------------------------------------------
#### 2) ####
# Model with only active and the block variables.
fit1 <- lm(logDiox ~ factor(OXYGEN) + factor(LOAD) + factor(PRSEK) +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
summary(fit1)
dioxin
is.na(dioxin)
dioxin[is.na(dioxin)]
sum(is.na(dioxin))
# Model(s) ----------------------------------------------------------------
#### 2) ####
# Model with only active and the block variables.
fit1 <- lm(logDiox ~ factor(OXYGEN) + factor(LOAD) + factor(PRSEK) +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
summary(fit1)
# Model(s) ----------------------------------------------------------------
#### 2) ####
# Model with only active and the block variables.
fit0 <- lm(logDiox ~ factor(OXYGEN) + factor(LOAD) + factor(PRSEK) +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
summary(fit0)
## Reduction of model
# -PRSEK
fit1.1 <- lm(logDiox ~ factor(OXYGEN) + factor(LOAD) +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
## Reduction of model
# -PRSEK
fit1 <- lm(logDiox ~ factor(OXYGEN) + factor(LOAD) +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
summary(fit1)
# Non significant p-value - cannot reject the fact that the models might be 'equal'(H0: ?1 = ?2)
anova(fit0, fit1)
rm(list=ls())
setwd("~/Documents/Uni/TiendeSemester/Adv. data analysis and stat. modelling/Exercises")
library(data.table)
library(psych)
library(GGally)
#### Exercise 1 ----------------
## Question 1
# data
t = seq(1,8)
y = c(4.4, 3.4, 3.3, 2.5, 7.3, 4.9, 4.8, 4.4)
plot(t,y)
# Define design matrix
X <- cbind(rep(1,8),c(rep(0,4),rep(1,4)))
## Question 2
betahat <- solve(t(X)%*%X)%*%t(X)%*%y
# the mean, mu, is 3.4, and the other parameter (roof or not) is 1.95.
# This means that we add 1.95 to the mean of 3.4, when we go to the roof.
## Question 3
# prediction would simply be:
betahat[1,1]
#### Exercise 2 ----------------
so2 <- read.csv('so2.csv', sep="\t")
names(so2)
pairs.panels(so2,
method = "pearson", # correlation method
hist.col = "#00AFBB",
density = TRUE,  # show density plots
ellipses = FALSE # show correlation ellipses
)
ggpairs(so2)
# Log transform data because of bad scaling
so2log <- log(so2)
ggpairs(so2log)
model0 <- lm(Pollution ~ Temp+Industry+Population+Wet.days+Wind+Rain,data=so2log)
summary(model0)
plot(model0$residuals)
qqnorm(model0$residuals)
qqline(model0$residuals)
model1 <- lm(Pollution ~ Temp+Industry+Population+Wind+Rain,data=so2log)
summary(model1)
plot(model1$residuals)
qqnorm(model1$residuals)
qqline(model1$residuals)
anova(model1,model0) # Not significant change. Therefore, we like model1 better because it's simple.
summary(fit1)
## Reduction of model
# -PRSEK
fit1 <- lm(logDiox ~ factor(OXYGEN) + factor(LOAD) +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
summary(fit1)
rm(list=ls())
library(GGally)
library(corrplot)
if (Sys.getenv('USER') == "mortenjohnsen"){
setwd("/Users/mortenjohnsen/OneDrive - Danmarks Tekniske Universitet/DTU/10. Semester/02424 - Advanced Dataanalysis and Statistical Modellling/02424---Assignments/")
}else if (Sys.getenv('USER') == "freja"){
setwd("~/Documents/Uni/TiendeSemester/Adv. data analysis and stat. modelling/02424---Assignments")
}else{
setwd("C:/Users/catdu/OneDrive/DTU/10. semester/Advanced Dataanalysis and Statistical Modelling/Assignment 1/02424---Assignments/")
}
source("DataPrep.R")
Trans.eq1 <- function(lambda, y = dioxin$DIOX){
y_lambda <- ((y)^lambda - 1)/lambda#, lambda > 0
return(y_lambda)
}
lambda_NLL <- function(theta, y = dioxin$DIOX){
lambda <- theta[1]
y_lambda <- Trans.eq1(lambda, y)
mu <- theta[2]#mean(y_lambda)
sigma <- theta[3]#sd(y_lambda)
NLL <- -sum(-1/2*log(sigma^2) - (y_lambda-mu)^2 / (2*sigma^2) + (lambda - 1)*log(y))
return(NLL)
}
theta.hat <- nlminb(start=c(1, 0, 1), objective = lambda_NLL)
lambda.hat <- round(theta.hat$par[1], 3)
mu.hat <- round(theta.hat$par[2], 3)
sd.hat <- round(theta.hat$par[3], 3)
#See if the boxcox transformation is significantly different from the log-transformation
pf_lambda <- function(lambda, y = dioxin$DIOX){
n <- length(y)
y_lambda <- Trans.eq1(lambda)
sd <- sd(y_lambda)
ll <- -n/2 * log(sd^2) - n/2 + (lambda - 1)* sum(log(y))
return(-ll)
}
lambda_interval <- seq(-.5,0.1,0.003)
pf_curve <- -sapply(lambda_interval, FUN = pf_lambda)-max(-sapply(lambda_interval, FUN = pf_lambda))
plot(lambda_interval
,pf_curve, type = "l", main = TeX("Profile Likelihood for \\lambda")
,ylim = c(-3,0))
grid()
abline(v = lambda.hat, lty = 2)
alpha <- 0.05
c <- -0.5 * qchisq(1-alpha, df = 1)
abline(h = c, col = "red")
#95% profilelikelihood CI for lambda include 0 and thus a log-transformation is sufficient and to be preferred over the boxcox.
#wald CI for confirmation:
sd_reg <- sqrt(diag(solve(hessian(func = lambda_NLL, x = theta.hat$par))))
lambda.hat + qt(c(alpha/2, 1-alpha/2), df = length(dioxin$DIOX) - 1) * sd_reg[1]
dioxin$DIOX_boxcox <- Trans.eq1(lambda.hat, dioxin$DIOX)
hist(dioxin$DIOX_boxcox, breaks = 5)
dioxin %>%
select(-PLANT, -LAB, -OXYGEN, -LOAD, -PRSEK, -OBSERV) %>%
melt() %>%
ggplot()+
geom_histogram(aes(x = value), bins = 10)+
facet_wrap(~variable, scales = "free")
#Block effects: PLANT (3 plants, RENO_N, RENO_S and KARA), TIME (For RENO_N the experiment
#was repeated at a later time point, 2, as well.), LAB (Two labs. One in DK and one in USE)
#considerable measurement noise is expected.
dioxin %>%
select(logDiox, TIME, LAB_USA_or_KK
, PLANT_RENO_N, PLANT_KARA # PLANT_RENO_S - is 0 in PLANT_RENO_N
, OXYGEN_Ordinal
, LOAD_Ordinal
, PRSEK_Ordinal
, O2, O2COR, NEFFEKT, QRAT) %>%
ggpairs()
summary(fit1)
# Model(s) ----------------------------------------------------------------
#### 2) ####
# Model with only active and the block variables.
fit0 <- lm(logDiox ~ factor(OXYGEN) + factor(LOAD) + factor(PRSEK) +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
summary(fit0)
## Reduction of model
# -PRSEK
fit1 <- lm(logDiox ~ factor(OXYGEN) + factor(LOAD) +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
summary(fit1)
# Not significant change. Therefore, we like fit1 better because it's simple.
anova(fit0, fit1)
## Further reduction of model
# -LAB
fit1 <- lm(logDiox ~ factor(OXYGEN) + factor(LOAD) +
factor(PLANT) + TIME, data = dioxin)
## Further reduction of model
# -LAB
fit2 <- lm(logDiox ~ factor(OXYGEN) + factor(LOAD) +
factor(PLANT) + TIME, data = dioxin)
summary(fit2)
## Reduction of model
# -PRSEK
fit1 <- lm(logDiox ~ factor(OXYGEN) + factor(LOAD) +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
summary(fit1)
anova(fit1, fit2)
# Fit plot with labelled outliers
par(mfrow=c(2,2))
plot(fit1, pch = 19, col = 'gray50',
main = "MODEL VARIATION",
sub='green = variation accounted for by the model')
dioxin
#### 3) ####
# Model with neasured and the block variables.
fit0 <- lm(logDiox ~ O2 + O2COR + NEFFEKT + QRAT
factor(PLANT) + TIME + factor(LAB), data = dioxin)
#### 3) ####
# Model with neasured and the block variables.
fit0 <- lm(logDiox ~ O2 + O2COR + NEFFEKT + QRAT
factor(PLANT) + TIME + factor(LAB), data = dioxin)
#### 3) ####
# Model with neasured and the block variables.
fit0 <- lm(logDiox ~ O2 + O2COR + NEFFEKT + QRAT +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
summary(fit0)
#### 3) ####
# Model with neasured and the block variables.
fit0_1 <- lm(logDiox ~ O2 + O2COR + NEFFEKT + QRAT +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
#### 3) ####
# Model with neasured and the block variables.
fit3_0 <- lm(logDiox ~ O2 + O2COR + NEFFEKT + QRAT +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
summary(fit3_0)
# Reduce model
# - QRAT
fit3_1 <- lm(logDiox ~ O2 + O2COR + NEFFEKT +
factor(PLANT) + TIME + factor(LAB), data = dioxin)
summary(fit3_1)
# Not significant change. Therefore, we like fit1 better because it's simple.
anova(fit3_0, fit3_1)
summary(fit3_1)
anova(fit3_1,fit3_2)
# Reduce model
# - PLANT
fit3_2 <- lm(logDiox ~ O2 + O2COR + NEFFEKT + TIME + factor(LAB), data = dioxin)
summary(fit3_2)
anova(fit3_1,fit3_2)
# Fit plot with labelled outliers
par(mfrow=c(2,2))
plot(fit3_0, pch = 19, col = 'gray50',
main = "MODEL VARIATION",
sub='green = variation accounted for by the model')
plot(fit3_1, pch = 19, col = 'gray50',
main = "MODEL VARIATION",
sub='green = variation accounted for by the model')
plot(fit1, pch = 19, col = 'gray50',
main = "MODEL VARIATION",
sub='green = variation accounted for by the model')
plot(fit3_1, pch = 19, col = 'gray50',
main = "MODEL VARIATION",
sub='green = variation accounted for by the model')
plot(fit1, pch = 19, col = 'gray50',
main = "MODEL VARIATION",
sub='green = variation accounted for by the model')
